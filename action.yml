---
name: ansible-test
description: >-
  GitHub Action for checking Ansible Collections
  with ansible-test
branding:
  icon: check-circle
  color: gray-dark
inputs:
  ansible-core-version:
    description: >-
      `ansible-core` Git revision. See https://github.com/ansible/ansible/tags
      and https://github.com/ansible/ansible/branches/all?query=stable- for
      ideas.
    default: stable-2.11
    required: true
  ns:
    description: Ansible Collection namespace
    required: true
  name:
    description: Ansible Collection name
    required: true
  pre-test-cmd:
    description: Extra command to invoke before ansible-test
    default:
  python-version:
    description: Controller Python version
    default: 3.9
  target-python-version:
    description: Target Python version
    default:
  testing-type:
    description: One of 'sanity', 'units' or 'integration'
    required: true
  test-deps:
    description: Test dependencies to install along with this collection
    default:
outputs:
  ansible-playbook-executable:
    description: Path to the auto-installed `ansible-playbook` executable
    value: ~/.local/bin/ansible-playbook
  ansible-test-executable:
    description: Path to the auto-installed `ansible-test` executable
    value: ~/.local/bin/ansible-test
  checkout-directory:
    description: >-
      Path to the auto-downloaded  # `${{ inputs.ns }}.${{ inputs.name }}`
      collection src directory
    # value: ansible_collections/${{ inputs.ns }}/${{ inputs.name }}
    value: ${{ steps.collection-checkout-dir.outputs.path }}
runs:
  using: composite
  steps:
  - name: Construct the collection source checkout directory path
    id: collection-checkout-dir
    run: >-
      echo
      ::set-output
      name=path::ansible_collections/${{ inputs.ns }}/${{ inputs.name }}
    shell: bash

  - name: Check out the collection
    uses: actions/checkout@v2
    with:
      path: ${{ steps.collection-checkout-dir.outputs.path }}
  - name: Set controller Python to ${{ inputs.python-version }}
    uses: actions/setup-python@v2
    with:
      python-version: ${{ inputs.python-version }}
  - name: Install ansible-core (${{ inputs.ansible-core-version }})
    run: >-
      python -m pip install
      https://github.com/ansible/ansible/archive/${{
        inputs.ansible-core-version
      }}.tar.gz
      --disable-pip-version-check
      --user
    shell: bash
  - name: Install collection dependencies
    # if: inputs.test-deps
    run: >-
      ${{
          inputs.test-deps
          && format('~/.local/bin/ansible-galaxy collection install {0} -p .', inputs.test-deps)
          || '>&2 echo Skipping installing the dependencies...'
      }}
    shell: bash
  - name: Run a pre-test command
    # if: inputs.pre-test-cmd
    # run: ${{ inputs.pre-test-cmd }}
    run: >-
      ${{
          inputs.pre-test-cmd
          && inputs.pre-test-cmd
          || '>&2 echo Skipping running the pre test command...'
      }}
    shell: bash
    working-directory: ${{ steps.collection-checkout-dir.outputs.path }}
  - name: Run ${{ inputs.testing-type }} tests
    run: >-
      ~/.local/bin/ansible-test ${{ inputs.testing-type }}
      -v --color --docker
      ${{
          inputs.testing-type != 'sanity'
          && '--coverage'
          || ''
      }}
      ${{
          inputs.testing-type == 'integration'
          && '--retry-on-error --continue-on-error --diff'
          || ''
      }}
      ${{
          inputs.target-python-version
          && format('--python {0}', inputs.target-python-version)
          || ''
      }}
    shell: bash
    working-directory: ${{ steps.collection-checkout-dir.outputs.path }}
  - name: Generate coverage report
    # if: >-
    #   inputs.testing-type != 'sanity'
    run: >-
      ${{
          inputs.testing-type == 'sanity'
          && '>&2 echo Skipping the coverage generation...'
          || '~/.local/bin/ansible-test coverage xml -v --requirements --group-by command --group-by version'
      }}
    shell: bash
    working-directory: ${{ steps.collection-checkout-dir.outputs.path }}
  # FIXME: generate https://codecov.io/gh/GITHUBORG/REPONAME in the name
  - name: >-
      Send the coverage data over to
      https://codecov.io/gh/${{ github.repository }}
    # if: >-
    #   inputs.testing-type != 'sanity'
    uses: codecov/codecov-action@v2
    with:
      flags: ${{ inputs.testing-type }}
...
